generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://vercel-admin-user:Gsf4KRIwZrFLUwBp@cluster0.wltmkac.mongodb.net/nestjs"
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  active      String
  avatar      String
  name        String
  password    String
  permissions String[]
  phone       String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Topic       Topic[]
}

model Tag {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  TopicTag TopicTag[]
}

model Topic {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  TopicTag  TopicTag[]
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userid], references: [id])
  userid    String
}

model TopicTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId     String
  topic     Topic    @relation(fields: [topicId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LineUser {
  id        String            @id @map("_id")
  callback  String
  category  String[]
  url       String
  type      String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  Article   LineUserArticle[]
}

model LineUserArticle {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  type      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    LineUser? @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId  String
}

model Birthday {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  gift      BirthdayGift[]
}

model BirthdayGift {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  img       String
  p         String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      Birthday? @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String?   @db.ObjectId
}
